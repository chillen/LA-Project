import project_logic as pr
import time

def ensemble_tester(num, V_generator, sim):
    """Performs num sims with vectors generated by V sent to sim"""
    total = [0, 0]
    for _ in range(num):
        V = V_generator()
        E = V[0]
        L = V[1]
        P = V[2]
        requestor = pr.create_elevator_requestor(E, L)
        results = sim(E, L, P)
        total[0] += results[0]
        total[1] += results[1]
    return (total[0]/num, total[1]/num)

results = []

def get_machines(K):
    machines = []
    machines.append(("Remain", lambda E, L, P: pr.dumb_simulator(E, L, P, K)))
    machines.append(("Random", lambda E, L, P: pr.rand_simulator(E, L, P, K)))
    machines.append(("1 $L_{RI}$", lambda E, L, P: pr.solution_one(E, L, P, K)))
    machines.append(("K $L_{RI}$", lambda E, L, P: pr.solution_two(E, L, P, K)))
    machines.append(("K $PL_{RI}$", lambda E, L, P: pr.solution_three(E, L, P, K)))
    return machines

def get_vectors():
    K_vals = [5, 10, 5, 10]
    vectors = []
    vectors.append((5, lambda: pr.get_set_vectors()))
    vectors.append((10, lambda: pr.get_set10_vectors()))
    for K in K_vals[2:4]:
        vectors.append((K, lambda K=K: pr.get_low_heavy_vectors(K)))
    for K in K_vals[2:4]:
        vectors.append((K, lambda K=K: pr.get_random_vectors(K)))
    return vectors

vectype = ["Handmade5", "Handmade10"]
vectype += ["FF Random"] * 2
vectype += ["Random"] * 2

num_ensembles = 10

tests = []

vectors = get_vectors()

print("-- Vectors Loaded. Testing with {} ensembles".format(num_ensembles))
f = open("proj-results/results.csv", "w")
f.write("VecType,Machine,K,Average T,Avg Iterations,Avg Runtime(s)\n")
f.close()
for i, vector in enumerate(vectors):
    print("-- Beginning Test {}/8: {} with K = {}".format(i+1, vectype[i], vector[0]))
    machines = get_machines(vector[0])
    print("-- -- Machines Loaded")
    results = []
    for machine in machines:
        print("-- -- Running: {}...".format(machine[0]))
        start_time = time.time()
        completed = ensemble_tester(num_ensembles, vector[1], machine[1])
        elapsed_time = time.time() - start_time
        # Machine name, K value, ensemble average time, average iterations to convergence
        results.append((machine[0], completed[0], completed[1], elapsed_time/num_ensembles))
        print("-- -- Finished")

    tests.append((vectype[i], vector[0], results))
    f = open("proj-results/results.csv", "a")
    for result in results:
        f.write("{0:},{1:},{2:},{3:2.2f},{4:2.2f},{5:2.2f}\n".format(vectype[i], result[0], vector[0], result[1], result[2], result[3]))
    f.close()